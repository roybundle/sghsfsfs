-- // Teleport Tab Setup // --
local TPTab = Window:CreateTab({
    Name = "Teleport",
    Icon = "sync_alt",
    ImageSource = "Material",
    ShowTitle = true  -- Show the big header text in the tab
})

-- // Find TpSpots // --
local TpSpotsFolder = Workspace:FindFirstChild("world"):WaitForChild("spawns"):WaitForChild("TpSpots")
local teleportSpots = {}  -- Array to store available teleport spots

for i, v in pairs(TpSpotsFolder:GetChildren()) do
    if table.find(teleportSpots, v.Name) == nil then
        table.insert(teleportSpots, v.Name)  -- Add unique spots to the teleportSpots array
    end
end

-- // Dropdown for Selecting Area Teleport // --
local IslandTPDropdownUI = TPTab:CreateDropdown({
    Name = "Area Teleport",  -- Title of the dropdown
    Description = nil,        -- Optional description for the dropdown
    Options = teleportSpots,  -- List of teleport spots (from `teleportSpots` array)
    CurrentOption = nil,      -- Default option (no initial selection)
    MultipleOptions = false,  -- Single selection mode
    SpecialType = nil,        -- Optional special type for the dropdown
    Callback = function(Value)
        if teleportSpots ~= nil and HumanoidRootPart ~= nil then
            xpcall(function()
                -- Teleport to the selected area
                HumanoidRootPart.CFrame = TpSpotsFolder:FindFirstChild(Value).CFrame + Vector3.new(0, 5, 0)
                IslandTPDropdownUI:SetValue(nil)  -- Reset dropdown value after teleporting
            end, function (err)
                -- Error handling (optional)
            end)
        end
    end
}, "IslandTPDropdownUI")

-- // Dropdown for Selecting Totem Teleports // --
local TotemTPDropdownUI = TPTab:CreateDropdown({
    Name = "Select Totem",  -- Title of the dropdown
    Description = nil,      -- Optional description
    Options = {"Aurora", "Sundial", "Windset", "Smokescreen", "Tempest"},  -- Predefined totems
    CurrentOption = nil,    -- No initial selection
    MultipleOptions = false,  -- Single selection
    SpecialType = nil,      -- Optional special type
    Callback = function(Value)
        if Value == "Aurora" then
            HumanoidRootPart.CFrame = CFrame.new(-1811, -137, -3282)
        elseif Value == "Sundial" then
            HumanoidRootPart.CFrame = CFrame.new(-1148, 135, -1075)
        elseif Value == "Windset" then
            HumanoidRootPart.CFrame = CFrame.new(2849, 178, 2702)
        elseif Value == "Smokescreen" then
            HumanoidRootPart.CFrame = CFrame.new(2789, 140, -625)
        elseif Value == "Tempest" then
            HumanoidRootPart.CFrame = CFrame.new(35, 133, 1943)
        end
        TotemTPDropdownUI:SetValue(nil)  -- Reset dropdown value after teleporting
    end
}, "TotemTPDropdownUI")

-- // Dropdown for Selecting World Event Teleports // --
local WorldEventTPDropdownUI = TPTab:CreateDropdown({
    Name = "Select World Event",  -- Title of the dropdown
    Description = nil,            -- Optional description
    Options = {"Strange Whirlpool", "Great Hammerhead Shark", "Great White Shark", "Whale Shark", "The Depths - Serpent"},  -- World events list
    CurrentOption = nil,          -- Default to no selection
    MultipleOptions = false,      -- Single selection
    SpecialType = nil,            -- Optional special type
    Callback = function(Value)
        local offset = Vector3.new(0, 135, 0)
        local WorldEvent = game.Workspace.zones.fishing:FindFirstChild(Value)
        if not WorldEvent then
            WorldEventTPDropdownUI:SetValue(nil)
            return ShowNotification("Not found " .. Value)
        end
        HumanoidRootPart.CFrame = CFrame.new(WorldEvent.Position + offset)  -- Teleport to selected world event location
        WorldEventTPDropdownUI:SetValue(nil)  -- Reset dropdown value after teleporting
    end
}, "WorldEventTPDropdownUI")

-- // Teleport to Traveler Merchant Button // --
TPTab:CreateButton({
    Name = "Teleport to Traveler Merchant",  -- Button label
    Description = "Teleports to the Traveler Merchant.",  -- Optional description
    Callback = function()
        local Merchant = game.Workspace.active:FindFirstChild("Merchant Boat")
        if not Merchant then
            ShowNotification("Not found Merchant")
            return
        end
        HumanoidRootPart.CFrame = CFrame.new(Merchant.Boat["Merchant Boat"].r.HandlesR.Position)  -- Teleport to Merchant
    end
})

-- // Create Safe Zone Button // --
TPTab:CreateButton({
    Name = "Create Safe Zone",  -- Button label
    Description = nil,          -- No description needed
    Callback = function()
        local SafeZone = Instance.new("Part")
        SafeZone.Size = Vector3.new(30, 1, 30)
        SafeZone.Position = Vector3.new(math.random(-2000, 2000), math.random(50000, 90000), math.random(-2000, 2000))
        SafeZone.Anchored = true
        SafeZone.BrickColor = BrickColor.new("Bright purple")
        SafeZone.Material = Enum.Material.ForceField
        SafeZone.Parent = game.Workspace
        HumanoidRootPart.CFrame = SafeZone.CFrame + Vector3.new(0, 5, 0)  -- Teleport to the newly created SafeZone
    end
})
